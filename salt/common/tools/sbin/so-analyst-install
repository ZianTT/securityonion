#!/bin/bash

# Copyright 2014-2022 Security Onion Solutions, LLC

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

if [ "$(id -u)" -ne 0 ]; then
	echo "This script must be run using sudo!"
	exit 1
fi

# if /etc/soversion doesn't exist then setup hasnt been run before and we need to source from a different location
if [[ ! -f /etc/soversion ]]; then
  source ../salt/common/tools/sbin/so-common
else
  source /usr/sbin/so-common
fi

INSTALL_LOG=/root/so-analyst-install.log
exec &> >(tee -a "$INSTALL_LOG")

log() {
	msg=$1
	level=${2:-I}
	now=$(TZ=GMT date +"%Y-%m-%dT%H:%M:%SZ")
	echo -e "$now | $level | $msg" >> "$INSTALL_LOG" 2>&1
}

error() {
	log "$1" "E"
}

info() {
	log "$1" "I"
}

title() {
	echo -e "\n-----------------------------\n $1\n-----------------------------\n" >> "$INSTALL_LOG" 2>&1
}

logCmd() {
	cmd=$1
	info "Executing command: $cmd"
	$cmd >> "$INSTALL_LOG" 2>&1
}

analyze_system() {
	title "System Characteristics"
	logCmd "uptime"
	logCmd "uname -a"
	logCmd "free -h"
	logCmd "lscpu"
	logCmd "df -h"
	logCmd "ip a"
}

analyze_system

OS=$(grep PRETTY_NAME /etc/os-release | grep 'CentOS Linux 7')
if [ $? -ne 0 ]; then
  echo "This is an unsupported OS. Please use CentOS 7 to install the analyst node."
  exit 1
fi

if [[ "$manufacturer" == "Security Onion Solutions" && "$family" == "Automated" ]]; then
  INSTALL=yes
  CURLCONTINUE=no
else
  INSTALL=''
  CURLCONTINUE=''
fi

FIRSTPASS=yes
while [[ $INSTALL != "yes" ]] && [[ $INSTALL != "no" ]]; do
  if [[ "$FIRSTPASS" == "yes" ]]; then
    clear
    echo "###########################################"
    echo "##          ** W A R N I N G **          ##"
    echo "##    _______________________________    ##"
    echo "##                                       ##"
    echo "##    Installing the Security Onion      ##"
    echo "##   analyst node on this device will    ##"
    echo "##       make permanent changes to       ##"
    echo "##              the system.              ##"
    echo "##                                       ##"
    echo "###########################################"
    echo "Do you wish to continue? (Type the entire word 'yes' to proceed or 'no' to exit)"
    FIRSTPASS=no
  else
    echo "Please type 'yes' to continue or 'no' to exit."
  fi      
  read INSTALL
done

if [[ $INSTALL == "no" ]]; then
  echo "Exiting analyst node installation."
  exit 0
fi

echo "Testing for internet connection with curl https://securityonionsolutions.com/"
CANCURL=$(curl -sI https://securityonionsolutions.com/ | grep "200 OK")
  if [ $? -ne 0 ]; then
    FIRSTPASS=yes
    while [[ $CURLCONTINUE != "yes" ]] && [[ $CURLCONTINUE != "no" ]]; do
      if [[ "$FIRSTPASS" == "yes" ]]; then
        echo "We could not access https://securityonionsolutions.com/."
        echo "Since packages are downloaded from the internet, internet access is required."
        echo "If you would like to ignore this warning and continue anyway, please type 'yes'."
        echo "Otherwise, type 'no' to exit."
        FIRSTPASS=no
      else
        echo "Please type 'yes' to continue or 'no' to exit."
      fi  
      read CURLCONTINUE
    done
    if [[ "$CURLCONTINUE" == "no" ]]; then
      echo "Exiting analyst node installation."
      exit 0
    fi
  else
    echo "We were able to curl https://securityonionsolutions.com/."
    sleep 3
  fi

# Place repo to download packages from repo.securityonion.net
if [[ ! -f /etc/yum.repos.d/securityonion.repo ]] || [[ ! -f /etc/yum.repos.d/securityonioncache.repo ]]; then
  securityonion_repo
fi

# Install a GUI text editor
yum -y install gedit

# Install misc utils
yum -y install wget curl unzip epel-release yum-plugin-versionlock;

# Install xWindows
yum -y groupinstall "X Window System";
yum -y install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts;
unlink /etc/systemd/system/default.target;
ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target;
yum -y install file-roller

# Install Mono - prereq for NetworkMiner
yum -y install mono-core mono-basic mono-winforms expect

# Install NetworkMiner
yum -y install securityonion-networkminer

# Install Wireshark for Gnome
yum -y install wireshark-gnome; 

# Install dnsiff
yum -y install dsniff;

# Install hping3
yum -y install hping3;

# Install netsed
yum -y install netsed;

# Install ngrep
yum -y install ngrep;

# Install scapy
yum -y install python36-scapy;

# Install ssldump
yum -y install ssldump;

# Install tcpdump
yum -y install tcpdump;

# Install tcpflow
yum -y install tcpflow;

# Install tcpxtract
yum -y install tcpxtract;

# Install whois
yum -y install whois;

# Install foremost
yum -y install securityonion-foremost

# Install chromium
yum -y install chromium;

# Install tcpstat
yum -y install securityonion-tcpstat;

# Install tcptrace
yum -y install securityonion-tcptrace;

# Install sslsplit
yum -y install libevent;
yum -y install sslsplit;

# Install Bit-Twist
yum -y install securityonion-bittwist;

# Install chaosreader
yum -y install perl-IO-Compress perl-Net-DNS;
yum -y install securityonion-chaosreader;

# Install package that contains and sets wallpaper, lockscreen, prevents user list at login screen and runs `dconf update`
yum -y install securityonion-analyst-extras

echo
echo "Analyst workstation has been installed!"
echo "Press ENTER to reboot or Ctrl-C to cancel."
read pause

reboot;
